[tool.poetry]
name = "python-tool-competition-2024"
version = "0.1.1"
description = "Pipeline to create test generators"
authors = ["Nicolas Erni <gann@zhaw.ch>"]
readme = "README.md"
packages = [{include = "python_tool_competition_2024"}]
license = "GPL-3.0-or-later"

[tool.poetry.dependencies]
python = "^3.9"
pytest = "^7.3.2"
pytest-cov = "^4.1.0"
rich = "^13.4.2"
click = "^8.1.3"
defusedxml = "^0.7.1"
toml = "^0.10.2"
mutpy = "^0.6.1"
cosmic-ray = "^8.3.7"
typing-extensions = "^4.7.1"
importlib-metadata = {version = "^6.8.0", python = "<3.10"}

[tool.poetry.group.linter.dependencies]
ruff = ">=0.0.274, <0.1"
vulture = "^2.7"
pip-audit = "^2.5.6"
black = "^23.3.0"
mypy = "^1.4.0"
bandit = "^1.7.5"
types-toml = "^0.10.8.7"

[tool.poetry.scripts]
python-tool-competition-2024 = 'python_tool_competition_2024.cli:main_cli'

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.plugins."python_tool_competition_2024.test_generators"]
dummy = "python_tool_competition_2024.generators:DummyTestGenerator"

[tool.pytest.ini_options]
markers = [
    'linter: all tests that run external linters which are usually slow',
]
addopts = [
    # show the slowest 10 tests
    '--durations=10',
    '--cov=python_tool_competition_2024',
    '--cov-report=html',
    '--cov-report=xml',
    '--cov-report=term',
    '--ignore=results',
]
# disable detection of classes starting with Test
# inherit from unittest.TestCase to test them
python_classes = ''
# treat all warnings as exceptions
filterwarnings = ["error"]

[tool.mypy]
mypy_path = "stubs"
show_error_codes = true
show_absolute_path = true
show_column_numbers = true

strict_optional = true
warn_no_return = true
disallow_any_unimported = true

# Across versions of mypy, the flags toggled by --strict vary.  To ensure
# we have reproducible type check, we instead manually specify the flags
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
implicit_reexport = false
strict_equality = true

# Disallow any
disallow_any_explicit = true
disallow_any_decorated = true

exclude = [
  '.venv',
  '.tox',
  'python_tool_competition_2024/templates',
]

[tool.coverage.run]
branch = true
omit = [
    "python_tool_competition_2024/templates/targets/*",
]

[tool.coverage.report]
exclude_lines = [
    "@(abc\\.)?abstractmethod",
    "@(abc\\.)?abstractproperty",
    "@(typing\\.)?overload",
    "if (typing\\.)?TYPE_CHECKING:",
    "class .*\\((|.*, ?)Protocol(|,.*)\\):",
    "# pragma: no cover",
]
fail_under = 100
sort = 'Cover'
show_missing = true

[tool.vulture]
paths = ['python_tool_competition_2024']
ignore_decorators = [
    "@pytest.fixture",
]
ignore_names = [
    'side_effect',
    'return_value',
]
exclude = [
    'python_tool_competition_2024/templates',
]

[tool.ruff]
target-version = "py39"
select = ["ALL"]
ignore = [
    # custom documentation rules
    "D406",
    "D407",
    # handled by black:
    "COM812",
    # don't require self and cls to have types
    "ANN101",
    "ANN102",
    # allow relative imports from parents
    "TID252",
    # don't separate typing imports
    "TCH",
]
extend-exclude = ["python_tool_competition_2024/templates"]

# Avoiding flagging (and removing) `V101` from any `# noqa`
# directives, despite Ruff's lack of support for `vulture`.
# See: https://github.com/jendrikseipp/vulture/blob/ecdda25a3bad37b9769e4defa93e8e26c547a1b9/vulture/core.py#L31:#L40
external = [
    "V101",  # unused attribute
    "V102",  # unused class
    "V103",  # unused function
    "V104",  # unused import
    "V105",  # unused method
    "V106",  # unused property
    "V107",  # unused variable
    "V201",  # unreachable code
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    # ignore missing docstrings
    "D1",
    # ignore asserts
    "S101",
    # ignore method calls in function defaults for hypothesis composites
    "B008",
    # allow magic numbers in tests
    "PLR2004",
    # allow accessing private members in tests
    "SLF001",
]
"python_tool_competition_2024/templates/targets/**/*.py" = [
    # ignore missing __init__.py
    "INP001",
]
"results/**/*.py" = [
    # ignore missing docstrings
    "D1",
]
"stubs/**/*.pyi" = [
    # ignore missing docstrings
    "D1",
    # ignore unused arguments
    "ARG001",
    # ignore missing __init__.py
    "INP001",
    # ignore bool params, because the library chose it this way
    "FBT001",
]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.bandit]
exclude_dirs = [".tox", ".venv"]

# disable tests covered by ruff
# see: https://github.com/charliermarsh/ruff/issues/1646
skips = [
    "B101",
    "B102",
    "B103",
    "B104",
    "B105",
    "B106",
    "B107",
    "B108",
    "B110",
    "B112",
    "B113",
    # "B201",
    # "B202",
    "B301",
    "B302",
    "B303",
    "B304",
    "B305",
    "B306",
    "B307",
    "B308",
    "B310",
    "B311",
    "B312",
    "B313",
    "B314",
    "B315",
    "B316",
    "B317",
    "B318",
    "B319",
    "B320",
    "B321",
    # "B322",  # missing
    "B323",
    "B324",
    "B501",
    # "B502",
    # "B503",
    # "B504",
    # "B505",
    "B506",
    # "B507",
    "B508",
    "B509",
    "B608",
    # "B601",
    "B602",
    "B603",
    "B604",
    "B605",
    "B606",
    "B607",
    "B608",
    # "B609",
    # "B610",
    # "B611",
    "B612",
    "B701",
    # "B702",
    # "B703",
]

[tool.black]
skip_magic_trailing_comma = true
extend_exclude = "python_tool_competition_2024/templates"
